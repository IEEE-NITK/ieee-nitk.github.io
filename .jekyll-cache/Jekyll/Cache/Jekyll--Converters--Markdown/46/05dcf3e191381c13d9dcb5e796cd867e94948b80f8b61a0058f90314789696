I"~)<h2 id="introduction">Introduction</h2>

<p>A genetic algorithm is a search heuristic inspired by Darwin’s theory of natural evolution. A genetic algorithm reflects the process of natural selection: the fittest survive and breed.</p>

<p>The process of natural selection begins by selecting the fittest individuals from a population. The cross to produce offsprings that have characterestics of both parents. If both parents have good fitness, then their child is also likely to inherit their characterestics and have better fitness.</p>

<p>In this introduction, we will be trying to match a string from scratch.</p>

<h2 id="environment-and-population">Environment and Population</h2>

<p>First, we need to define an environment that would determine the fitness of an individual. Here, our environment would be the String that we’re trying to create.</p>

<p>So, a string S of some length with alphanumeric characters.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
</code></pre></div></div>

<p>Any string of any length is an individual in this environment.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	Individual = "LAKSKDJLKMCasdkjAKSDjkj"
</code></pre></div></div>
<p>Our initial population would we filled with multiple such individuals with random letters and numbers.</p>

<h2 id="fitness">Fitness</h2>

<p>The fitness of an individual is proportional to how close it is to the defined string S for this environment.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	Individual = "ABCDEFGHIJKLMNOPQRSTUVWXYS"  
	Fitness(Individual) = (Number of characters in Individual same as String)  
			      / (Number of characters in String)  
						= 25/26
						= 0.962
</code></pre></div></div>

<p>The python code below implements the fitness function we’ve defined.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">evaluate_fitness</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">new</span><span class="p">):</span>
        <span class="n">together</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">zip_longest</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">new</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="n">cost</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">a</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="n">together</span> <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">])</span>
        <span class="n">cost</span> <span class="o">/=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">actual</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">new</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">cost</span>
</code></pre></div></div>

<h3 id="breeding-and-mutation">Breeding and Mutation</h3>
<p>As per Natural Selection laws, the fittest individuals should survive (along with some random unfit undividuals) and breed to create the next generation of individuals.</p>

<p>Given two parents, We can define breeding to select a character from the two parents at random. That is, We would choose the <code class="highlighter-rouge">i</code>th character of <code class="highlighter-rouge">Parent 1</code> or the <code class="highlighter-rouge">i</code>th character of <code class="highlighter-rouge">Parent 2</code> at random for the <code class="highlighter-rouge">i</code>th character of the <code class="highlighter-rouge">Child</code>.</p>

<p>To simulate mutation, given a <code class="highlighter-rouge">0 &lt; mutation rate &lt; 1</code>  if a uniformly generated pseudorandom floating point number is greater than this defined <code class="highlighter-rouge">mutation rate</code>, then an alphanumeric character is randomly chosen to be in that position <code class="highlighter-rouge">i</code> for the child. We can also used the same <code class="highlighter-rouge">mutation rate</code> to randomly add or remove an extra character in the child.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">make_child</span><span class="p">(</span><span class="n">parent_1</span><span class="p">,</span> <span class="n">parent_2</span><span class="p">):</span>
        <span class="n">longer_parent</span>  <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">parent_1</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parent_1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">parent_2</span><span class="p">)</span> <span class="k">else</span> <span class="n">parent_2</span><span class="p">)</span>
        <span class="n">shorter_parent</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">parent_2</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parent_1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">parent_2</span><span class="p">)</span> <span class="k">else</span> <span class="n">parent_1</span><span class="p">)</span>
    
        <span class="n">child</span> <span class="o">=</span> <span class="n">longer_parent</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">shorter_parent</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
            <span class="n">child</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">characters</span><span class="p">)</span> <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">mutation_rate</span> <span class="k">else</span> <span class="n">child</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">shorter_parent</span><span class="p">)):</span>
                <span class="n">child</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">shorter_parent</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="k">else</span> <span class="n">longer_parent</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            
            <span class="k">if</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">length_max</span><span class="p">):</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">mutation_rate</span><span class="p">):</span>
                    <span class="n">child</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">characters</span><span class="p">))</span>
                    <span class="n">n</span><span class="o">+=</span><span class="mi">1</span>
                
            <span class="k">if</span> <span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">mutation_rate</span><span class="p">):</span>
                <span class="n">child</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">child</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">n</span><span class="o">-=</span><span class="mi">1</span>
            <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">return</span> <span class="s">""</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="wrapping-it-all-up">Wrapping it all up</h3>

<p>After concretely defining our environment, to genrate a random population and choosing the best indiviuals and breeding them to create the next generation is trivial.</p>

<p>Check out the full notebook <a href="https://github.com/gurupunskill/string-matcher/">here</a></p>
:ET